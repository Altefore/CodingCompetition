import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferStrategy;
import java.net.URL;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JPanel;

// TODO keyboard handling
// TODO mouse handling
// TODO create GUI
// TODO implement game loop

/**
 * @author Zach Williamson , Jonathan Light, Erik Cole
 *
 */
public class Game extends Canvas {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	long lastLoopTime = 0;
	private ArrayList<Actor> actors = new ArrayList<Actor>();
	private ArrayList<Actor> removeList = new ArrayList<Actor>();
	private BufferStrategy strategy;
	private KeyInputHandler keyHandler = new KeyInputHandler();
	public PlaySound SoundController;

	private Player player1;
	private Player player2;
	
	private int score1;
	private int score2;
	private int level;
	private int shots;
	private int misses;
	
	private long pauseTime = 0;
	private long player1SpawnTime = 0;

	private boolean pause = false;
	private boolean gameBeingPlayed = false;
	private boolean lastBoolean = true;
	
	static boolean is1Invincible = false;
	static boolean is2Invincible = false;

	private StarField starField;

	static int enemyCount = 0;
	static int player1Lives = 3;
	static int player2Lives = 3;

	private ArrayList<FlightController> flightControllers;

	private JFrame frame = new JFrame("Galaga Game");
	static final Dimension frameDimensions = new Dimension(1050, 800);
	static final Dimension gameDimensions = new Dimension(800, 800);
	static final Dimension menuDimensions = new Dimension(250, 800);

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		Game game = new Game();

		
		game.startGame();

	}

	/**
	 * add an actor to the game
	 * 
	 * @param a
	 *            the actor to add
	 */
	public void addActor(Actor a) {
		actors.add(a);
	}

	/**
	 * add to the list of actors to remove
	 * 
	 * @param a
	 *            the actor to remove
	 */
	public void removeActor(Actor a) {
		removeList.add(a);

	}

	/**
	 * This method is called to begin the game, it initializes all of the game
	 * parameters and starts the game loop
	 */
	public void startGame() {
		showSplashScreen();
		actors.clear();
		initEnemy();
		//loadBoss();
		//setMenuPanel();
		gameBeingPlayed = true;

		gameLoop();
	}

	/**
	 * This is where the game is run, it contains all of the logic for moving
	 * objects, user input, drawing, and game logic.
	 */
	public void gameLoop() {
		long lastLoopTime = System.currentTimeMillis() - 20;

		// TODO change 'true' to a variable that controls game state
		while (true) {
			long delta = System.currentTimeMillis() - lastLoopTime;

			// System.out.println(1000/delta);
			lastLoopTime = System.currentTimeMillis();

			/* Get hold of a graphics context for the accelerated surface and blank it out */
			Graphics2D g = (Graphics2D) getBufferStrategy().getDrawGraphics();
			g.setColor(Color.BLACK);
			g.fillRect(0, 0, 800, 800);
			
			starField.update(delta);
			starField.draw(g);
			
		
			//User has ablity to reset the game
			if (keyHandler.isRPressed()) 
			{
				keyHandler.setR(false);
				resetGame();
			}
			
			//if enemyCount <= 0, players cannot be killed
			
			if(enemyCount <= 0){
				set1Invincible(true);
				set2Invincible(true);
			}
			else if(System.currentTimeMillis() - player1SpawnTime <= 1500){
				set1Invincible(true);
				set2Invincible(true);
			}
			else{
				set1Invincible(false);
				set2Invincible(false);
			}
			
			/* Update all actors */
			if(!pause)
			{
				for (Actor a : actors) 
				{
					a.update();
				}
	
				/* Update all flight controllers */
				for (FlightController fc : flightControllers) 
				{
					fc.update(delta);
				}
	
				/* Move all of the actors */
				for (Actor a : actors) 
				{
					a.move(delta);
				}
			}
			/* Draw all of the actors */
			for (Actor a : actors) 
			{
				a.draw(g);
			}

			// Check for collisions between actors
			// ToDo delete later
			// Missle(Game parentGame, double x, double y, double xSpeed, double
			// ySpeed)
			// addActor(new Missle(this,getWidth()/2,getHeight()/2,0,300));
			for (int first = 0; first < actors.size(); first++) {
				Actor firstActor = actors.get(first);
				for (int second = first + 1; second < actors.size(); second++) {
					Actor secondActor = actors.get(second);
					if (firstActor.collidesWith(secondActor)) {
						firstActor.collidedWith(secondActor);
						secondActor.collidedWith(firstActor);
					}
				}
			}
			/**
			 * begin player movement listeners
			 */
			if (gameBeingPlayed) {
				
				/* Move player 1 */
				if (keyHandler.isRightPressed() && !keyHandler.isLeftPressed()
						&& player1 != null) {
					if (player1.isPlayerAlive()) {
						player1.goRight();
					}
				}
				if (keyHandler.isLeftPressed() && !keyHandler.isRightPressed()
						&& player1 != null) {
					if (player1.isPlayerAlive()) {
						player1.goLeft();
					}
				}
				if (keyHandler.isUpPressed() && !keyHandler.isDownPressed()
						&& player1 != null) {
					if (player1.isPlayerAlive()) {
						player1.goUp();
					}
				}
				if (keyHandler.isDownPressed() && !keyHandler.isUpPressed()
						&& player1 != null) {
					{
						player1.goDown();
					}
				}
				//If player1 dies, show this messageLabel
				if (player1 != null && !player1.isPlayerAlive()) {

					//TODO:BLOW UP PLAYER EFFECTS
					if (pauseTime == 0) {
						pauseTime = System.currentTimeMillis();
					}
					messageLabel(g, "PRESS SPACE TO RESPAWN");
				}
				/* Fire player 1 */
				/* Or respawn Player 1 */
				if (keyHandler.isSpacePressed()) {
					if (player1 == null) {
						initPlayer1();
						player1SpawnTime = System.currentTimeMillis();
						player1Lives--;
					} else if (!player1.isPlayerAlive()
							&& (System.currentTimeMillis() - pauseTime >= 1500)) {
						initPlayer1();
						player1SpawnTime = System.currentTimeMillis();
						if (!(player1Lives <= 0))
							player1Lives--;
					} else if (player1.isPlayerAlive()) {
						if (player1.tryToFire(System.currentTimeMillis())) {
							shots++;
						}
					}
				}
				/* Create player 2 */
				if (keyHandler.isZPressed()) {
					System.out.println("Player 2 Start");
					//initPlayer2();
					keyHandler.setZ(false);
					if (player2 == null) {
						initPlayer2();
						//playerLives--;
					} else if (!player2.isPlayerAlive()) {
						initPlayer2();
					}
				}
				/* Move player 2 */
				if (keyHandler.isDPressed() && !keyHandler.isAPressed()
						&& player2 != null) {
					if (player2.isPlayerAlive()) {
						player2.goRight();
					}
				}
				if (keyHandler.isAPressed() && !keyHandler.isDPressed()
						&& player2 != null) {
					if (player2.isPlayerAlive()) {
						player2.goLeft();
					}
				}
				if (keyHandler.isWPressed() && !keyHandler.isSPressed()
						&& player2 != null) {
					if (player2.isPlayerAlive()) {
						player2.goUp();
					}
				}
				if (keyHandler.isSPressed() && !keyHandler.isWPressed()
						&& player2 != null) {
					if (player2.isPlayerAlive()) {
						player2.goDown();
					}
				}
				/* Fire player 2 */
				if (keyHandler.isOnePressed() && player2 != null) {
					if (player2.isPlayerAlive()) {
						player2.tryToFire(System.currentTimeMillis());
					}
				}
			}
			//end player movement options
			/* Mute sound */
			if (keyHandler.isMPressed()) 
			{
				SoundController.mute();
				keyHandler.setM(false);
			}
			
			/* Pause game */
			
			if (keyHandler.isPPressed() && player1 != null) {
				pause();
				/*
				for (Actor a : actors) {
					a.setXSpeed(0);
				}
				*/
				keyHandler.setP(false);
			}
			if(pause){
				drawMainMenu(g,"PRESS P TO UNPAUSE");
			}

			for (Actor a : removeList) {
				actors.remove(a);
			}
			removeList.clear();

			if (enemyCount <= 0 )
			{
				// TODO change initEnemy to a loadLevel1, loadLevel2 ect. 
				// TODO make a level counter and increment it
				//loadLevel2();
				if(level == 1)
				{
					if(lastBoolean){
						score1 = score1 + (score1*(shots-misses))/shots;
						pauseTime = System.currentTimeMillis();
						lastBoolean = false;
					}
					endLevelScreen(g,"LEVEL 1 COMPLETE");	
					if(System.currentTimeMillis() - pauseTime >= 5000){
						messageLabel(g,"PRESS SPACE FOR LEVEL 2");
						if (keyHandler.spacePressed) {
							lastBoolean = true;
							level = 2;
							loadLevel2();
						}
					}
					
				}
				else if(level == 2)
				{
					if(lastBoolean){
						score1 = score1 + (score1*(shots-misses))/shots;
						pauseTime = System.currentTimeMillis();
						lastBoolean = false;
					}
					endLevelScreen(g,"LEVEL 2 COMPLETE");	
					if(System.currentTimeMillis() - pauseTime >= 5000){
						messageLabel(g,"PRESS SPACE FOR LEVEL 3");
						if (keyHandler.spacePressed) {
							lastBoolean = true;
							level = 3;
							loadLevel3();
						}
					}
				}
				else if (level == 3)
				{
					if(lastBoolean){
						score1 = score1 + (score1*(shots-misses))/shots;
						pauseTime = System.currentTimeMillis();
						lastBoolean = false;
					}
					endLevelScreen(g,"LEVEL 3 COMPLETE");	
					if(System.currentTimeMillis() - pauseTime >= 5000){
						messageLabel(g,"PRESS SPACE FOR BOSS");
						if (keyHandler.spacePressed) {
							lastBoolean = true;
							level = 4;
							loadBoss();
						}
					}
				}
				else if (level == 4)
				{
					score1 = score1 + (score1*(shots-misses))/shots;
					//endLevelScreen(g,"BOSS");
					gameOver();
					level++;
				}
			}
			if(player1Lives == 0 && !player1.isPlayerAlive())
				gameOver();
			if (!gameBeingPlayed) //TODO: change back to false
			{
				gameOverScreen(g);
			}

			if(player1 == null)
			{
				drawMainMenu(g, "Press Space to Start");
			}
			
			drawSideBar(g);

			g.dispose();
			strategy.show();

			try {
				Thread.sleep(10);
			} catch (Exception e) {
			}

			// TODO add keyboard and mouse handling
		}
	}

	/**
	 * initalize all of the actors.
	 */
	public void initPlayer1() {

		if (player1Lives > 0) {
			player1 = null;
			player1 = new Player(this);
			System.out.println("add ship");
			actors.add(player1);
		}

	}

	public void initPlayer2() {


			player2 = null;
			player2 = new Player(this);
			System.out.println("add ship");
			actors.add(player2);
		

	}

	public void initEnemy() {
		flightControllers = new ArrayList<FlightController>();

		ArrayList<Enemy> tmp = new ArrayList<Enemy>();
		for (int i = -145; i <= 200; i += 50) {
			tmp.add(new EnemyShipMedium(this, 400 + i, 50));
		}
		FlightController flightController1 = new DefaultFlightController();
		flightController1.setYOffset(50);
		flightController1.addShips(tmp);
		flightController1.go();
		flightControllers.add(flightController1);
		actors.addAll(flightController1.getShips());
		enemyCount += tmp.size();

		tmp.clear();

		for (int i = -180; i <= 180; i += 30) {
			tmp.add(new EnemyShipBasic(this, 400 + i, 100));
		}
		FlightController flightController2 = new DivingFlightController();
		flightController2.setYOffset(100);
		flightController2.addShips(tmp);
		flightController2.go();
		flightControllers.add(flightController2);
		actors.addAll(flightController2.getShips());
		enemyCount += tmp.size();

		tmp.clear();

		for (int i = -240; i <= 260; i += 50) {
			tmp.add(new EnemyShipBasic(this, 400 + i, 150));
		}
		FlightController flightController3 = new DivingFlightController();
		flightController3.setYOffset(150);
		flightController3.addShips(tmp);
		flightController3.go();
		flightControllers.add(flightController3);
		actors.addAll(flightController3.getShips());
		enemyCount += tmp.size();
	}

	public void loadLevel2() {
		flightControllers = new ArrayList<FlightController>();

		ArrayList<Enemy> tmp = new ArrayList<Enemy>();
		for (int i = -150; i <= 200; i += 50) {
			tmp.add(new EnemyShipMedium(this, 400 + i, 50));
		}
		FlightController flightController1 = new DefaultFlightController();
		flightController1.setYOffset(50);
		flightController1.addShips(tmp);
		flightController1.go();
		flightControllers.add(flightController1);
		actors.addAll(flightController1.getShips());
		enemyCount += tmp.size();

		tmp.clear();

		for (int i = -180; i <= 180; i += 30) {
			tmp.add(new EnemyShipMedium(this, 400 + i, 100));
		}
		FlightController flightController2 = new DivingFlightController();
		flightController2.setYOffset(100);
		flightController2.addShips(tmp);
		flightController2.go();
		flightControllers.add(flightController2);
		actors.addAll(flightController2.getShips());
		enemyCount += tmp.size();

		tmp.clear();

		for (int i = -240; i <= 260; i += 50) {
			tmp.add(new EnemyShipMedium(this, 400 + i, 150));
		}
		FlightController flightController3 = new FastDivingFlightController();
		flightController3.setYOffset(150);
		flightController3.addShips(tmp);
		flightController3.go();
		flightControllers.add(flightController3);
		actors.addAll(flightController3.getShips());
		enemyCount += tmp.size();
	}

	public void loadLevel3() {
		flightControllers = new ArrayList<FlightController>();

		ArrayList<Enemy> tmp = new ArrayList<Enemy>();
		for (int i = -145; i <= 200; i += 50) {
			tmp.add(new EnemyShipHard(this, 400 + i, 50));
		}
		FlightController flightController1 = new DivingFlightController();
		flightController1.setYOffset(50);
		flightController1.addShips(tmp);
		flightController1.go();
		flightControllers.add(flightController1);
		actors.addAll(flightController1.getShips());
		enemyCount += tmp.size();

		tmp.clear();

		for (int i = -180; i <= 180; i += 30) {
			tmp.add(new EnemyShipMedium(this, 400 + i, 100));
		}
		FlightController flightController2 = new DivingFlightController();
		flightController2.setYOffset(100);
		flightController2.addShips(tmp);
		flightController2.go();
		flightControllers.add(flightController2);
		actors.addAll(flightController2.getShips());
		enemyCount += tmp.size();

		tmp.clear();

		for (int i = -240; i <= 260; i += 50) {
			tmp.add(new EnemyShipBasic(this, 400 + i, 150));
		}
		FlightController flightController3 = new FastDivingFlightController();
		flightController3.setYOffset(150);
		flightController3.addShips(tmp);
		flightController3.go();
		flightControllers.add(flightController3);
		actors.addAll(flightController3.getShips());
		enemyCount += tmp.size();
	}
	public void loadBoss(){
		
		flightControllers = new ArrayList<FlightController>();

		ArrayList<Enemy> tmp = new ArrayList<Enemy>();
		tmp.add(new EnemyBoss(this, 400 , 150));
		FlightController bossController = new FastDivingFlightController();
		bossController.setYOffset(50);
		bossController.addShips(tmp);
		bossController.go();
		flightControllers.add(bossController);
		actors.addAll(bossController.getShips());
		enemyCount += tmp.size();
	}
	
	public void addScore(int ammount)
	{
		score1 += ammount;
	}

	public void addMiss()
	{
		misses++;
	}
	
	public Game() {

		JPanel gamePanel = (JPanel) frame.getContentPane();

		gamePanel.setPreferredSize(frameDimensions);
		gamePanel.setBackground(Color.BLACK);

		// panel.setLayout(null);

		gamePanel.setBounds(0, 0, gameDimensions.width, gameDimensions.height);
		gamePanel.add(this);
		gamePanel.setVisible(true);
		
		Font font = null;
		URL fontUrl = this.getClass().getClassLoader().getResource("fonts/VT323-Regular.ttf");
		if(fontUrl == null)
		{
			System.err.println("Could not find font");
		}
		else
		{
			try{
				font = Font.createFont(Font.TRUETYPE_FONT, fontUrl.openStream());
				font = font.deriveFont(Font.PLAIN, 40);
				GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
			    ge.registerFont(font);
			    this.setFont(font);
			}
			catch(Exception e)
			{
				System.err.println("blah this is an error");
			}
		}
		//gamePanel.setFont();
		

		/*
		 * JPanel menuPanel = (JPanel) frame.getContentPane();
		 * 
		 * menuPanel.setBackground(Color.WHITE);
		 * menuPanel.setBounds(800,0,250,800); menuPanel.add(this);
		 * menuPanel.setVisible(true);
		 */
		setIgnoreRepaint(true);

		frame.pack();
		frame.setResizable(false);
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		//requestFocus();
		createBufferStrategy(2);

		strategy = getBufferStrategy();

		addKeyListener(this.keyHandler);
		SoundController = new PlaySound(true);
		
		starField = new StarField(this);
		requestFocus();
		score1 = 0;
		level = 1;
		shots = 0;
		misses = 0;

	}

	private class KeyInputHandler extends KeyAdapter {
		// player 1 movement keys
		private boolean leftPressed = false;
		private boolean rightPressed = false;
		private boolean upPressed = false;
		private boolean downPressed = false;
		private boolean spacePressed = false;
		// player 2 movement keys
		private boolean aPressed = false;
		private boolean dPressed = false;
		private boolean wPressed = false;
		private boolean sPressed = false;
		private boolean onePressed = false;
		// user option keys
		private boolean pPressed = false; // allows for pausing
		private boolean zPressed = false; // allows for player 2
		private boolean mPressed = false; // for muting sound
		private boolean zeroPressed = false;
		private boolean rPressed = false; // for reseting game

		public void keyTyped(KeyEvent e) {
			if (e.getKeyChar() == 'p') {
				pPressed = true;
			}
			if (e.getKeyChar() == 'z') {
				zPressed = true;
				// System.out.println("Z HAS BEEN PRESSED");
			}
			if (e.getKeyChar() == 'm') {
				mPressed = true;
			}
			if (e.getKeyChar() == '0') {

				zeroPressed = true;
			}
			if (e.getKeyChar() == 'r') {

				rPressed = true;

			}
		}

		public void keyPressed(KeyEvent e) {
			if (e.getKeyCode() == KeyEvent.VK_LEFT) {
				leftPressed = true;
				// System.out.println("left");
			}
			if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
				rightPressed = true;
			}
			if (e.getKeyCode() == KeyEvent.VK_UP) {
				// System.out.println("UP HAS BEEN PRESSED");
				upPressed = true;
			}
			if (e.getKeyCode() == KeyEvent.VK_DOWN) {
				downPressed = true;
			}
			if (e.getKeyCode() == KeyEvent.VK_SPACE) {
				spacePressed = true;
			}

			if (e.getKeyCode() == KeyEvent.VK_A) {
				aPressed = true;
				System.out.println("a");
			}
			if (e.getKeyCode() == KeyEvent.VK_D) {
				dPressed = true;
			}
			if (e.getKeyCode() == KeyEvent.VK_W) {
				wPressed = true;
			}
			if (e.getKeyCode() == KeyEvent.VK_S) {
				sPressed = true;
			}
			if (e.getKeyCode() == KeyEvent.VK_1) {
				onePressed = true;
			}
		}

		public void keyReleased(KeyEvent e) {
			if (e.getKeyCode() == KeyEvent.VK_LEFT) {
				leftPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
				rightPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_UP) {
				upPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_DOWN) {
				downPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_SPACE) {
				spacePressed = false;
			}

			if (e.getKeyCode() == KeyEvent.VK_A) {
				aPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_D) {
				dPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_W) {
				wPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_S) {
				sPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_1) {
				onePressed = false;
			}
		}

		public boolean isLeftPressed() {
			return leftPressed;
		}

		public boolean isRightPressed() {
			return rightPressed;
		}

		public boolean isUpPressed() {
			return upPressed;
		}

		public boolean isDownPressed() {
			return downPressed;
		}

		public boolean isSpacePressed() {
			return spacePressed;
		}

		public boolean isAPressed() {
			return aPressed;
		}

		public boolean isDPressed() {
			return dPressed;
		}

		public boolean isWPressed() {
			return wPressed;
		}

		public boolean isSPressed() {
			return sPressed;
		}

		public boolean isOnePressed() {
			return onePressed;
		}

		public boolean isPPressed() {
			return pPressed;
		}

		public boolean isMPressed() {
			return mPressed;
		}

		public boolean isZPressed() {
			return zPressed;
		}

		public boolean isZeroPressed() {
			return zeroPressed;
		}
		
		public boolean isRPressed() {
			return rPressed;
		}

		public void setM(boolean b) {
			mPressed = b;
		}

		public void setZ(boolean b) {
			zPressed = b;
		}

		public void setZero(boolean b) {
			zeroPressed = b;
		}

		public void setP(boolean b) {
			pPressed = b;
		}
		
		public void setR(boolean b) {
			rPressed = b;
		}

	}

	public void showSplashScreen() {
		Graphics2D g = (Graphics2D) getBufferStrategy().getDrawGraphics();
		g.setColor(Color.BLACK);
		g.fillRect(0, 0, getWidth(), getHeight());

		SplashScreen galagaLogo = new SplashScreen(this);
		galagaLogo.draw(g);
		g.dispose();
		BufferStrategy strategy = getBufferStrategy();
		strategy.show();

		try {
			Thread.sleep(2000);
		} catch (Exception e) {
		}

	}

	public void setMenuPanel() {
		Graphics2D g = (Graphics2D) getBufferStrategy().getDrawGraphics();
		g.setColor(Color.GRAY);
		g.fillRect(800, 0, 250, 800);

		BufferStrategy strategy = getBufferStrategy();
		strategy.show();

	}

	public void pause() {
		pause = !pause;
	}

	public boolean isPlayer1Alive() {
		if (player1 != null) {
			if (!player1.isPlayerAlive())
				return false;
			else
				return true;
		} else
			return false;
	}

	public boolean isPlayer2Alive() {
		if (player2 != null) {
			if (!player2.isPlayerAlive())
				return false;
			else
				return true;
		} else
			return false;
	}

	public void gameOver() {
		gameBeingPlayed = false;
	}

	public void drawSideBar(Graphics g) {
		g.setColor(Color.WHITE);
		g.fillRect((int)gameDimensions.getWidth(), 0, (int)menuDimensions.getWidth(), (int)menuDimensions.getHeight());
		g.setColor(Color.ORANGE);
		g.fillRect((int)gameDimensions.getWidth() + 5, 5, (int)menuDimensions.getWidth() - 10, (int)menuDimensions.getHeight() - 10);
		g.setColor(Color.BLACK);
		g.fillRect((int)gameDimensions.getWidth() + 10, 10, (int)menuDimensions.getWidth() - 20, (int)menuDimensions.getHeight() - 20);
		
		g.setColor(Color.WHITE);
		g.drawString("High Score:", (int)Game.gameDimensions.getWidth() + 30, 40);
		g.drawString(String.format("%05d", 12345), (int) Game.gameDimensions.getWidth() + 30, 80);
		
		g.drawString("Your Score:", (int)Game.gameDimensions.getWidth() + 30, 160);
		g.drawString(String.format("%05d", score1), (int) Game.gameDimensions.getWidth() + 30, 200);
		
		g.drawString("Accuracy:", (int)Game.gameDimensions.getWidth() + 30, 280);
		g.drawString(String.format("%01d%%", (shots != 0 ? ((shots-misses)*100)/(shots) : 0)), (int) Game.gameDimensions.getWidth() + 30, 320);
		
		g.drawString("Lives: ", (int)Game.gameDimensions.getWidth() + 30, 400);
		g.drawString(String.format("%d", player1Lives), (int) Game.gameDimensions.getWidth() + 200, 400);
		
		g.drawString("P: PAUSE", (int)Game.gameDimensions.getWidth() + 30, 600);
		g.drawString("M: MUTE", (int)Game.gameDimensions.getWidth() + 30, 635);
		g.drawString("R: RESTART", (int)Game.gameDimensions.getWidth() + 30, 670);
		g.drawString("Z: PLAYER2", (int)Game.gameDimensions.getWidth() + 30, 705);
		
		
	}
	
	public void drawMainMenu(Graphics g, String message)
	{
		int width = (int)Game.gameDimensions.getWidth();
		int height = (int)Game.gameDimensions.getHeight();
		g.setColor(Color.WHITE);
		g.fillRect(width/4, height/4, width/2, height/2 + 40);
		g.setColor(Color.BLACK);
		g.fillRect(width/4 + 5, height/4 + 5, width/2 - 10, height/2 + 30);

		g.setColor(Color.WHITE);
		g.drawString(message, width/4+20, height/2-140);
		
		g.setColor(System.currentTimeMillis() % 1000 > 500 ? Color.WHITE : Color.ORANGE);
		g.fillRect(width/4+20, height/2-120, 352, 4);
	
		g.setColor(Color.WHITE);
		g.drawString("PLAYER 1", width/4+20, height/2-60);
		g.drawString("Move: Arrow keys", width/4+20, height/2-20);
		g.drawString("Fire: Space", width/4+20, height/2+20);
		
		g.drawString("PLAYER 2", width/4+20, height/2+80);
		g.drawString("Move: WASD keys", width/4+20, height/2+120);
		g.drawString("Fire: '1'", width/4+20, height/2 + 160);
	}
	
	public void endLevelScreen(Graphics g, String message)
	{
		int width = (int)Game.gameDimensions.getWidth();
		int height = (int)Game.gameDimensions.getHeight();
		g.setColor(Color.WHITE);
		g.fillRect(width/4, height/4 + 80, width/2, height/2 + 40);
		g.setColor(Color.BLACK);
		g.fillRect(width/4 + 5, height/4 + 85, width/2 - 10, height/2 + 30);

		g.setColor(Color.WHITE);
		g.drawString(message, width/4+20, height/2-140+80);
		
		g.setColor(System.currentTimeMillis() % 1000 > 500 ? Color.WHITE : Color.ORANGE);
		g.fillRect(width/4+20, height/2-120+80, 352, 4);
	
		g.setColor(Color.WHITE);
		g.drawString("PLAYER 1", width/4+20, height/2-60+80);
		g.drawString(String.format("SCORE : %05d",score1), width/4+20, height/2-20+80);
		
		if (player2!=null) {
			g.drawString("PLAYER 2", width / 4 + 20, height / 2 + 80 + 80);
			g.drawString(String.format("SCORE : %05d", score1), width / 4 + 20,
					height / 2 + 120 + 80);
		
		}
		else {
			g.drawString("FOR 2 PLAYER, PRESS Z", width / 4 + 20, height / 2 + 80 + 80);
			
		}
	}
	
	public void gameOverScreen(Graphics g) {
		
		
		int width = (int)Game.gameDimensions.getWidth();
		int height = (int)Game.gameDimensions.getHeight();
		g.setColor(Color.WHITE);
		g.fillRect(width/4 - 20, height/4 + 15, width/2 + 45, height/2 + 60);
		g.setColor(Color.BLACK);
		g.fillRect(width/4 - 15, height/4 + 20, width/2 + 35, height/2 + 50);


		g.setColor(Color.WHITE);
		g.drawString("GAME OVER", width/4+130, height/2-120);
		g.setColor(System.currentTimeMillis() % 1000 > 500 ? Color.WHITE : Color.ORANGE);
		g.fillRect(width/4+25, height/2-100, 352, 4);
	
		g.setColor(Color.WHITE);
		g.drawString("Player 1 Score: ", width/4+25, height/2-30);
		g.drawString(String.format("%05d", score1), width/2+100, height/2-30);
		
		g.drawString("Level Reached: ", width/4+25, height/2+40);
		g.drawString(String.format("%d", level), width/2+100, height/2+40);
		
		g.drawString("HIGH SCORES", width/4+120, height/2+100);
		g.drawString("AAA" + "   " + "12345", width/4 +120, height/2+110+35);
		g.drawString("BBB" + "   " + "12345", width/4 +120, height/2+145+35);
		g.drawString("CCC" + "   " + "12345", width/4 +120, height/2+180+35);
		g.drawString("DDD" + "   " + "12345", width/4 +120, height/2+215+35);
		
		if (keyHandler.isRPressed()) 
		{
			keyHandler.setR(false);
			resetGame();
		}
		//enemyCount++;
		//setMenuPanel();
	}
	
	public void messageLabel(Graphics g, String message){
		int width = (int)Game.gameDimensions.getWidth();
		int height = (int)Game.gameDimensions.getHeight();
		g.setColor(Color.WHITE);
		g.drawString(message, width/4+10, height/2-140-40);
		
		g.setColor(System.currentTimeMillis() % 1000 > 500 ? Color.WHITE : Color.ORANGE);
		g.fillRect(width/4+25, height/2-120-40, 352, 4);
	}
	
	public void set1Invincible(boolean b){
		is1Invincible = b;
	}
	public void set2Invincible(boolean b){
		is2Invincible = b;
	}
	public void resetGame(){
		score1 = 0;
		shots = 0;
		misses = 0;

		pauseTime = 0;

		pause = false;
		gameBeingPlayed = false;
		lastBoolean = true;
		is1Invincible = false;
		is2Invincible = false;

		enemyCount = 0;
		player1Lives = 3;
		player1 = null;
		player2 = null;

		startGame();
	}

	public void notifyDeath() {
		System.out.println("You died");
	}
	
}
