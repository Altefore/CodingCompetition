import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferStrategy;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JPanel;


// TODO keyboard handling
// TODO mouse handling
// TODO create GUI
// TODO implement game loop

/**
 * @author Zach Williamson
 *
 */
public class Game extends Canvas {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	long lastLoopTime = 0;
	private ArrayList<Actor> actors = new ArrayList<Actor>();
	private ArrayList<Actor> removeList = new ArrayList<Actor>();
	private BufferStrategy strategy;	
	private KeyInputHandler keyHandler = new KeyInputHandler();
	
	
	private Player ship;
	
	static int ENEMY_START_X = 400;
	static int ENEMY_START_Y = 100;
	static int ENEMY_SPEED_X = 70;
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
		Game game = new Game();
		
		game.showSplashScreen();
		game.startGame();
		
		

	}
	
	/**
	 * add an actor to the game
	 * @param a the actor to add
	 */
	public void addActor(Actor a)
	{
		actors.add(a);
	}
	
	/**
	 * add to the list of actors to remove
	 * @param a the actor to remove
	 */
	public void removeActor(Actor a)
	{
		removeList.add(a);
	}
	
	/**
	 * This method is called to begin the game, it initializes all of the game parameters and starts the game loop
	 */
	public void startGame()
	{
		actors.clear();
		initPlayer();
		initEnemy();
		
		gameLoop();
	}
	
	/**
	 * This is where the game is run, it contains all of the logic for
	 * moving objects, user input, drawing, and game logic.
	 */
	public void gameLoop()
	{
		long lastLoopTime = System.currentTimeMillis()-20;
		
		// TODO change 'true' to a variable that controls game state
		while(true)
		{
			long delta = System.currentTimeMillis() - lastLoopTime;
			System.out.println(1000/delta);
			lastLoopTime = System.currentTimeMillis();
			
			// Get hold of a graphics context for the accelerated 

			// surface and blank it out

			Graphics2D g = (Graphics2D) getBufferStrategy().getDrawGraphics(); //TODO:figure out why g = null when run
			g.setColor(Color.BLACK);
			g.fillRect(0,0,800,800);
			
			for(Actor a : actors)
			{
				a.update();
			}
			
			// Move all of the actors
			for(Actor a : actors)
			{
				a.move(delta);
			}
			//Draw all of the actors
			
			for(Actor a : actors)
			{
				a.draw(g);
			}
			
			// Check for collisions between actors
			
			for(int first = 0; first < actors.size(); first++)
			{
				Actor firstActor = actors.get(first);
				for(int second = first+1; second < actors.size(); second++)
				{
					Actor secondActor = actors.get(second);
					if(firstActor.collidesWith(secondActor))
					{
						firstActor.collidedWith(secondActor);
						secondActor.collidedWith(firstActor);
					}
				}
			}
			
			if(keyHandler.isRightPressed() && ! keyHandler.isLeftPressed())
			{
				ship.setXSpeed(300);
			}
			if(keyHandler.isLeftPressed() && ! keyHandler.isRightPressed())
			{
				ship.setXSpeed(-300);
			}
			if(keyHandler.isUpPressed() && ! keyHandler.isDownPressed())
			{
				ship.setYSpeed(-300);
			}
			if(keyHandler.isDownPressed() && ! keyHandler.isUpPressed())
			{
				ship.setYSpeed(300);
			}
			if(keyHandler.isSpacePressed())
			{
				ship.tryToFire(System.currentTimeMillis());
				
			}
			if(keyHandler.isSpacePressed() && (keyHandler.isDownPressed() || keyHandler.isUpPressed())){
				/*if(e0!= null){
					e0.tryToFire(System.currentTimeMillis());
				}
				e1.tryToFire(System.currentTimeMillis());
				e2.tryToFire(System.currentTimeMillis());
				e3.tryToFire(System.currentTimeMillis());
				*/
			}
			
			for(Actor a : removeList)
			{
				actors.remove(a);
			}
			removeList.clear();

			g.dispose();
			strategy.show();
			
			try { Thread.sleep(10); } catch (Exception e) {}
			
			// TODO add keyboard and mouse handling
		}
	}
	
	/**
	 * initalize all of the actors.  
	 */
	public void initPlayer()
	{
		ship = new Player(this);
		
		if ( ship != null )
			System.out.println("add ship");
			actors.add( ship );
			
		// TODO add enemy ships
	}
	
	public void initEnemy(){
		
		Enemy s0 = new SwoopingEnemy(this, ENEMY_START_X + 40, ENEMY_START_Y );
		Enemy s1 = new SwoopingEnemy(this, ENEMY_START_X + 80, ENEMY_START_Y );
		EnemyShipBasic e0 = new EnemyShipBasic(this, ENEMY_START_X, ENEMY_START_Y );
		EnemyShipBasic e1 = new EnemyShipBasic(this, ENEMY_START_X-40, ENEMY_START_Y );
		EnemyShipBasic e2 = new EnemyShipBasic(this, ENEMY_START_X-80, ENEMY_START_Y );
		EnemyShipBasic e3 = new EnemyShipBasic(this, ENEMY_START_X-120, ENEMY_START_Y );
		if ( ship != null )
			System.out.println("add Enemys");
			actors.add( e0 );
			actors.add( e1 );
			actors.add( e2 );
			actors.add( e3 );
			//actors.add( s0 );
			//actors.add( s1 );
			

		
	}
	
	public Game(){
		
		JFrame frame = new JFrame("Galaga Game");
		Dimension gameDimensions = new Dimension(800,800);
		JPanel panel = (JPanel) frame.getContentPane();
		
		panel.setPreferredSize(gameDimensions);
		panel.setBackground(Color.BLACK);
		//panel.setLayout(null);
		
		panel.setBounds(0, 0, gameDimensions.width, gameDimensions.height);
		panel.add ( this );
		
		panel.setVisible(true);
		
		setIgnoreRepaint(true);
		
		frame.pack();
		frame.setResizable(false);
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		requestFocus();
		createBufferStrategy(2);
		
		strategy = getBufferStrategy();
		
		addKeyListener(this.keyHandler);
		
	}

	private class KeyInputHandler extends KeyAdapter
	{
		private boolean leftPressed = false;
		private boolean rightPressed = false;
		private boolean upPressed = false;
		private boolean downPressed = false;
		private boolean spacePressed = false;
		
		public void keyPressed(KeyEvent e)
		{
			if (e.getKeyCode() == KeyEvent.VK_LEFT) {
				leftPressed = true;
				System.out.println("left");
			}
			if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
				rightPressed = true;
			}
			if (e.getKeyCode() == KeyEvent.VK_UP) {
				upPressed = true;
			}
			if (e.getKeyCode() == KeyEvent.VK_DOWN) {
				downPressed = true;
			}
			if (e.getKeyCode() == KeyEvent.VK_SPACE) {
				spacePressed = true;
			}
		}
		
		public void keyReleased(KeyEvent e)
		{
			if (e.getKeyCode() == KeyEvent.VK_LEFT) {
				leftPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
				rightPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_UP) {
				upPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_DOWN) {
				downPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_SPACE) {
				spacePressed = false;
			}
		}
		
		public boolean isLeftPressed()
		{
			return leftPressed;
		}
		
		public boolean isRightPressed()
		{
			return rightPressed;
		}
		
		public boolean isUpPressed()
		{
			return upPressed;
		}
		
		public boolean isDownPressed()
		{
			return downPressed;
		}
		
		public boolean isSpacePressed()
		{
			return spacePressed;
		}
	}
	
	public void showSplashScreen(){
		Graphics2D g = (Graphics2D) getBufferStrategy().getDrawGraphics(); 
		g.setColor(Color.BLACK);
		g.fillRect(0,0,getWidth(),getHeight());
		
		SplashScreen galagaLogo = new SplashScreen(this);
		galagaLogo.draw(g);
		g.dispose();
		BufferStrategy strategy = getBufferStrategy();
		strategy.show();
		
		
		try { Thread.sleep(5000); } catch (Exception e) {}
	}
}
